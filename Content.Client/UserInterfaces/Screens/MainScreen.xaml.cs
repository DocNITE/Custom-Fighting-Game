using Content.Client.Resources;
using Robust.Client;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.ResourceManagement;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Configuration;
using Robust.Shared.Network;
using Robust.Shared.Prototypes;

namespace Content.Client.UserInterfaces.Screens;

[GenerateTypedNameReferences]
public partial class MainScreen : UIScreen
{
    [Dependency] private readonly IBaseClient _client = default!;
    [Dependency] private readonly IConfigurationManager _cfg = default!;
    [Dependency] private readonly IUserInterfaceManager _userInterface = default!;
    [Dependency] private readonly IClientNetManager _net = default!;
    [Dependency] private readonly IPrototypeManager _prototypeManager = default!;
    [Dependency] private readonly IResourceCache _resourceCache = default!;

    public MainScreen()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
        SetAnchorPreset(this, LayoutPreset.Wide);
        
        // This could be done better. I don't want to deal with stylesheets at the moment.
        var texture = _resourceCache.GetTexture("/Textures/Interface/Nano/square_black.png");
        var shader = _prototypeManager.Index<ShaderPrototype>("CameraStatic").Instance().Duplicate();
        
        BackgroundTexture.Stretch = TextureRect.StretchMode.Scale;
        BackgroundTexture.Texture = texture;
        BackgroundTexture.ShaderOverride = shader;
    }

    protected override void Draw(DrawingHandleScreen handle)
    {
        base.Draw(handle);
    }
}